spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/analyzer
    username: dbuser
    password: 12345
  sql:
    init:
      mode: always
  output:
    ansi:
      enabled: ALWAYS
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        format_sql: true
  kafka:
    consumer-snapshot:
      bootstrap-servers: localhost:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: ru.yandex.practicum.deserializer.SnapshotEventDeserializer
      client-id: sensor-consumer
      group-id: group-practicum
      max-poll-records: 100
      fetch-max-bytes: 3072000
      max-partition-fetch-bytes: 307200
      consume-attempts-timeout-ms: 1000
    consumer-hub:
      bootstrap-servers: localhost:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: ru.yandex.practicum.deserializer.HubEventDeserializer
      client-id: analyzer-consumer
      group-id: group-analyzer
      max-poll-records: 100
      fetch-max-bytes: 3072000
      max-partition-fetch-bytes: 307200
      consume-attempts-timeout-ms: 1000
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: ru.yandex.practicum.serializer.AvroSerializer
    topics:
      sensor-topic: telemetry.sensors.v1
      hub-topic: telemetry.hubs.v1
      snapshot-topic: telemetry.snapshots.v1
grpc:
  client:
    hub-router:
      address: 'static://localhost:59090'
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext